<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scripts/League/League.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/League/League.cs" />
              <option name="originalContent" value="using System;&#10;using System.Linq;&#10;using System.Collections.Generic;&#10;using UnityEngine;&#10;&#10;[CreateAssetMenu(fileName = &quot;NewLeague&quot;, menuName = &quot;League/League&quot;)]&#10;public class League : ScriptableObject&#10;{&#10;    [Header(&quot;Runtime Standings&quot;)]&#10;    [Tooltip(&quot;Calculated standings for this league, sorted by points.&quot;)]&#10;    public TeamStanding[] standings;&#10;&#10;    [Header(&quot;League Settings&quot;)]&#10;    public string leagueName;&#10;    public string description;&#10;    public Sprite leagueIcon;&#10;    public Color leagueColor;&#10;    public Team[] teams; // Array of teams in the league&#10;    public int LeagueAbove; // League above this one, if any&#10;    public int LeagueBelow; // League below this one, if any&#10;    public int maxRaces = 10;&#10;    public int currentRace = 0; // Current&#10;    public int currentSeason = 1; // Current season number&#10;    public bool isActive = true; // Is this league currently active?&#10;    public bool isFinished = false; // Is this league finished?&#10;    &#10;&#10;    /// &lt;summary&gt;&#10;    /// Recalculates the league standings based on each team's wins, draws, and losses.&#10;    /// Win = 3 points, Draw = 1 point.&#10;    /// &lt;/summary&gt;&#10;    public void RecalculateStandings()&#10;    {&#10;        var list = new List&lt;TeamStanding&gt;();&#10;        foreach (var team in teams)&#10;        {&#10;            var s = new TeamStanding&#10;            {&#10;                team = team,&#10;                wins = team.wins,&#10;                draws = team.draws,&#10;                losses = team.losses,&#10;                points = team.wins * 3 + team.draws&#10;            };&#10;            list.Add(s);&#10;        }&#10;        // Sort by points, then wins&#10;        var sorted = list.OrderByDescending(s =&gt; s.points)&#10;                         .ThenByDescending(s =&gt; s.wins)&#10;                         .ToList();&#10;        // Assign positions&#10;        for (int i = 0; i &lt; sorted.Count; i++)&#10;        {&#10;            var entry = sorted[i];&#10;            entry.position = i + 1;&#10;            sorted[i] = entry;&#10;        }&#10;        standings = sorted.ToArray();&#10;    }&#10;}&#10;&#10;[Serializable]&#10;public struct TeamStanding&#10;{&#10;    public Team team;&#10;    public int points;&#10;    public int wins;&#10;    public int draws;&#10;    public int losses;&#10;    public int position;&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using System.Linq;&#10;using System.Collections.Generic;&#10;using UnityEngine;&#10;&#10;[CreateAssetMenu(fileName = &quot;NewLeague&quot;, menuName = &quot;League/League&quot;)]&#10;public class League : ScriptableObject&#10;{&#10;    [Header(&quot;Runtime Standings&quot;)]&#10;    [Tooltip(&quot;Calculated standings for this league, sorted by points.&quot;)]&#10;    public TeamStanding[] standings;&#10;&#10;    [Header(&quot;League Settings&quot;)]&#10;    public string leagueName;&#10;    public string description;&#10;    public Sprite leagueIcon;&#10;    public Color leagueColor;&#10;    public Team[] teams; // Array of teams in the league&#10;    public int LeagueAbove; // League above this one, if any&#10;    public int LeagueBelow; // League below this one, if any&#10;    public int maxRaces = 10;&#10;    public int currentRace = 0; // Current&#10;    public int currentSeason = 1; // Current season number&#10;    public bool isActive = true; // Is this league currently active?&#10;    public bool isFinished = false; // Is this league finished?&#10;    &#10;&#10;    /// &lt;summary&gt;&#10;    /// Recalculates the league standings based on each team's wins, draws, and losses.&#10;    /// Win = 3 points, Draw = 1 point.&#10;    /// &lt;/summary&gt;&#10;    public void RecalculateStandings()&#10;    {&#10;        var list = new List&lt;TeamStanding&gt;();&#10;        foreach (var team in teams)&#10;        {&#10;            var stats = team.currentSeasonStats;&#10;            var s = new TeamStanding&#10;            {&#10;                team = team,&#10;                wins = stats.wins,&#10;                draws = stats.draws,&#10;                losses = stats.losses,&#10;                points = stats.Points&#10;            };&#10;            list.Add(s);&#10;        }&#10;        // Sort by points, then wins&#10;        var sorted = list.OrderByDescending(s =&gt; s.points)&#10;                         .ThenByDescending(s =&gt; s.wins)&#10;                         .ToList();&#10;        // Assign positions&#10;        for (int i = 0; i &lt; sorted.Count; i++)&#10;        {&#10;            var entry = sorted[i];&#10;            entry.position = i + 1;&#10;            sorted[i] = entry;&#10;        }&#10;        standings = sorted.ToArray();&#10;    }&#10;}&#10;&#10;[Serializable]&#10;public struct TeamStanding&#10;{&#10;    public Team team;&#10;    public int points;&#10;    public int wins;&#10;    public int draws;&#10;    public int losses;&#10;    public int position;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/League/Team.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/League/Team.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;&#10;&#10;[CreateAssetMenu(fileName = &quot;NewTeam&quot;, menuName = &quot;League/Team&quot;)]&#10;public class Team : ScriptableObject&#10;{&#10;    [Header(&quot;Team Details&quot;)]&#10;    public string teamName;&#10;    public string teamDescription;&#10;    public Sprite teamLogo;&#10;    public Color teamColor;&#10;    public int teamQuality;&#10;   &#10;    [Header(&quot;Team Members&quot;)]&#10;    public TeamMember[] teamMembers; &#10;   &#10;    [Header(&quot;Team Stats&quot;)]&#10;    public int wins;&#10;    public int losses;&#10;    public int draws;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using UnityEngine;&#10;&#10;&#10;[Serializable]&#10;public struct SeasonStats&#10;{&#10;    public int wins;&#10;    public int draws;&#10;    public int losses;&#10;    public int Points =&gt; wins * 3 + draws;&#10;}&#10;&#10;[CreateAssetMenu(fileName = &quot;NewTeam&quot;, menuName = &quot;League/Team&quot;)]&#10;public class Team : ScriptableObject&#10;{&#10;    [Header(&quot;Team Details&quot;)]&#10;    public string teamName;&#10;    public string teamDescription;&#10;    public Sprite teamLogo;&#10;    public Color teamColor;&#10;    public int teamQuality;&#10;   &#10;    [Header(&quot;Team Members&quot;)]&#10;    public TeamMember[] teamMembers; &#10;   &#10;    [Header(&quot;Current Season Stats&quot;)]&#10;    [Tooltip(&quot;Wins, draws, losses, and points for the current season.&quot;)]&#10;    public SeasonStats currentSeasonStats;&#10;&#10;    [Header(&quot;All-Time Stats&quot;)]&#10;    [Tooltip(&quot;Cumulative wins, draws, losses, and points across all seasons.&quot;)]&#10;    public SeasonStats lifetimeStats;&#10;&#10;    /// &lt;summary&gt;&#10;    /// Records a match result, updating both season and lifetime stats.&#10;    /// &lt;/summary&gt;&#10;    public void RecordMatchResult(bool isWin, bool isDraw)&#10;    {&#10;        if (isWin) {&#10;            currentSeasonStats.wins++;&#10;            lifetimeStats.wins++;&#10;        } else if (isDraw) {&#10;            currentSeasonStats.draws++;&#10;            lifetimeStats.draws++;&#10;        } else {&#10;            currentSeasonStats.losses++;&#10;            lifetimeStats.losses++;&#10;        }&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// Resets only the current season stats (e.g. at season start).&#10;    /// &lt;/summary&gt;&#10;    public void ResetSeasonStats()&#10;    {&#10;        currentSeasonStats = new SeasonStats();&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/League/TeamMember.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/League/TeamMember.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;&#10;public enum Attitude&#10;{&#10;    Positive,&#10;    Neutral,&#10;    Negative&#10;}&#10;&#10;&#10;&#10;&#10;&#10;&#10;[CreateAssetMenu(fileName = &quot;NewTeamMember&quot;, menuName = &quot;League/TeamMember&quot;)]&#10;public class TeamMember : ScriptableObject&#10;{&#10;    [Header(&quot;Team Member Info&quot;)]&#10;    [Tooltip(&quot;The display name of the team member.&quot;)]&#10;    public string memberName;&#10;&#10;    public Sprite memberIcon;&#10;&#10;    [Tooltip(&quot;A short biography or backstory for this member.&quot;)]&#10;    public string memberDescription;&#10;&#10;    public int age;&#10;&#10;    [Tooltip(&quot;The general attitude of this member during races/events.&quot;)]&#10;    public Attitude attitude = Attitude.Neutral;&#10;&#10;    [Header(&quot;Team Member Stats&quot;)]&#10;    [Tooltip(&quot;Base stats: strength, stamina, technique, team work.&quot;)]&#10;    public CharacterStats characterStats = new CharacterStats(5f, 5f, 5f, 5f); // default stats: strength, stamina, technique, teamWork&#10;&#10;    [Header(&quot;Progression&quot;)]&#10;    [Tooltip(&quot;Current level of this team member.&quot;)]&#10;    public int level = 1;&#10;&#10;    [Tooltip(&quot;Current XP earned towards next level.&quot;)]&#10;    public int experience = 0;&#10;&#10;    [Tooltip(&quot;XP required to reach the next level.&quot;)]&#10;    public int xpToNextLevel = 100;&#10;&#10;    [Header(&quot;Economy&quot;)]&#10;    [Tooltip(&quot;Base salary or cost for hiring this member.&quot;)]&#10;    public int salary = 50;&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;public enum Attitude&#10;{&#10;    Positive,    // generally upbeat and optimistic&#10;    Neutral,     // balanced, neither overly positive nor negative&#10;    Negative,    // pessimistic or downbeat&#10;    Competitive, // thrives on competition and challenges&#10;    Cooperative, // works well with others, team-oriented&#10;    Cautious,    // careful and risk-averse&#10;    Aggressive,  // assertive and driven&#10;    Energetic,   // high energy, enthusiastic&#10;    Lazy         // low motivation, needs encouragement&#10;}&#10;&#10;&#10;&#10;&#10;&#10;&#10;[CreateAssetMenu(fileName = &quot;NewTeamMember&quot;, menuName = &quot;League/TeamMember&quot;)]&#10;public class TeamMember : ScriptableObject&#10;{&#10;    [Header(&quot;Team Member Info&quot;)]&#10;    [Tooltip(&quot;The display name of the team member.&quot;)]&#10;    public string memberName;&#10;&#10;    public Sprite memberIcon;&#10;&#10;    [Tooltip(&quot;A short biography or backstory for this member.&quot;)]&#10;    public string memberDescription;&#10;&#10;    public int age;&#10;&#10;    [Tooltip(&quot;The general attitude of this member during races/events.&quot;)]&#10;    public Attitude attitude = Attitude.Neutral;&#10;&#10;    [Header(&quot;Team Member Stats&quot;)]&#10;    [Tooltip(&quot;Base stats: strength, stamina, technique, team work.&quot;)]&#10;    public CharacterStats characterStats = new CharacterStats(5f, 5f, 5f, 5f); // default stats: strength, stamina, technique, teamWork&#10;&#10;    [Header(&quot;Progression&quot;)]&#10;    [Tooltip(&quot;Current level of this team member.&quot;)]&#10;    public int level = 1;&#10;&#10;    [Tooltip(&quot;Current XP earned towards next level.&quot;)]&#10;    public int experience = 0;&#10;&#10;    [Tooltip(&quot;XP required to reach the next level.&quot;)]&#10;    public int xpToNextLevel = 100;&#10;&#10;    [Header(&quot;Economy&quot;)]&#10;    [Tooltip(&quot;Base salary or cost for hiring this member.&quot;)]&#10;    public int salary = 50;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>