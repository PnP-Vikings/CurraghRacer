<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scripts/League/League.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/League/League.cs" />
              <option name="originalContent" value="using System;&#10;using System.Linq;&#10;using System.Collections.Generic;&#10;using UnityEngine;&#10;&#10;[CreateAssetMenu(fileName = &quot;NewLeague&quot;, menuName = &quot;League/League&quot;)]&#10;public class League : ScriptableObject&#10;{&#10;    [Header(&quot;Runtime Standings&quot;)]&#10;    [Tooltip(&quot;Calculated standings for this league, sorted by points.&quot;)]&#10;    public TeamStanding[] standings;&#10;&#10;    [Header(&quot;League Settings&quot;)]&#10;    public string leagueName;&#10;    public string description;&#10;    public Sprite leagueIcon;&#10;    public Color leagueColor;&#10;    public Team[] teams; // Array of teams in the league&#10;    public int LeagueAbove; // League above this one, if any&#10;    public int LeagueBelow; // League below this one, if any&#10;    public int maxRaces = 10;&#10;    public int currentRace = 0; // Current&#10;    public int currentSeason = 1; // Current season number&#10;    public bool isActive = true; // Is this league currently active?&#10;    public bool isFinished = false; // Is this league finished?&#10;    &#10;&#10;    /// &lt;summary&gt;&#10;    /// Recalculates the league standings based on each team's wins, draws, and losses.&#10;    /// Win = 3 points, Draw = 1 point.&#10;    /// &lt;/summary&gt;&#10;    public void RecalculateStandings()&#10;    {&#10;        var list = new List&lt;TeamStanding&gt;();&#10;        foreach (var team in teams)&#10;        {&#10;            var s = new TeamStanding&#10;            {&#10;                team = team,&#10;                wins = stats.wins,&#10;                draws = stats.draws,&#10;                losses = stats.losses,&#10;                points = stats.Points&#10;            };&#10;            list.Add(s);&#10;        }&#10;        // Sort by points, then wins&#10;        var sorted = list.OrderByDescending(s =&gt; s.points)&#10;                         .ThenByDescending(s =&gt; s.wins)&#10;                         .ToList();&#10;        // Assign positions&#10;        for (int i = 0; i &lt; sorted.Count; i++)&#10;        {&#10;            var entry = sorted[i];&#10;            entry.position = i + 1;&#10;            sorted[i] = entry;&#10;        }&#10;        standings = sorted.ToArray();&#10;    }&#10;}&#10;&#10;[Serializable]&#10;public struct TeamStanding&#10;{&#10;    public Team team;&#10;    public int points;&#10;    public int wins;&#10;    public int draws;&#10;    public int losses;&#10;    public int position;&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using System.Linq;&#10;using System.Collections.Generic;&#10;using UnityEngine;&#10;&#10;namespace League&#10;{&#10;    [CreateAssetMenu(fileName = &quot;NewLeague&quot;, menuName = &quot;League/League&quot;)]&#10;    public class League : ScriptableObject&#10;    {&#10;        [Header(&quot;Runtime Standings&quot;)]&#10;        [Tooltip(&quot;Calculated standings for this league, sorted by points.&quot;)]&#10;        public TeamStanding[] standings;&#10;&#10;        [Header(&quot;League Settings&quot;)]&#10;        public string leagueName;&#10;        public string description;&#10;        public Sprite leagueIcon;&#10;        public Color leagueColor;&#10;        public Team[] teams;&#10;        [Tooltip(&quot;League above this one, if any.&quot;)]&#10;        public int leagueAbove;&#10;        [Tooltip(&quot;League below this one, if any.&quot;)]&#10;        public int leagueBelow;&#10;        public int maxRaces = 10;&#10;        public int currentRace; // Current race index&#10;        public int currentSeason = 1; // Current season number&#10;        public bool isActive = true;&#10;        public bool isFinished;&#10;&#10;        /// &lt;summary&gt;&#10;        /// Recalculates the league standings based on each team's wins, draws, and losses.&#10;        /// Win = 3 points, Draw = 1 point.&#10;        /// &lt;/summary&gt;&#10;        public void RecalculateStandings()&#10;        {&#10;            var list = new List&lt;TeamStanding&gt;();&#10;            foreach (var team in teams)&#10;            {&#10;                var stats = team.currentSeasonStats;&#10;                var s = new TeamStanding&#10;                {&#10;                    team = team,&#10;                    wins = stats.Wins,&#10;                    points = stats.Points&#10;                };&#10;                list.Add(s);&#10;            }&#10;            var sorted = list.OrderByDescending(s =&gt; s.points)&#10;                             .ThenByDescending(s =&gt; s.wins)&#10;                             .ToList();&#10;            for (int i = 0; i &lt; sorted.Count; i++)&#10;            {&#10;                var entry = sorted[i];&#10;                entry.position = i + 1;&#10;                sorted[i] = entry;&#10;            }&#10;            standings = sorted.ToArray();&#10;        }&#10;    }&#10;&#10;    [Serializable]&#10;    public struct TeamStanding&#10;    {&#10;        public Team team;&#10;        public int points;&#10;        public int wins;&#10;        public int position;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/League/Team.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/League/Team.cs" />
              <option name="originalContent" value="using System;&#10;using UnityEngine;&#10;&#10;&#10;[Serializable]&#10;public struct SeasonStats&#10;{&#10;    public int wins;&#10;    public int draws;&#10;    public int losses;&#10;    public int Points =&gt; wins * 3 + draws;&#10;}&#10;&#10;[CreateAssetMenu(fileName = &quot;NewTeam&quot;, menuName = &quot;League/Team&quot;)]&#10;public class Team : ScriptableObject&#10;{&#10;    [Header(&quot;Team Details&quot;)]&#10;    public string teamName;&#10;    public string teamDescription;&#10;    public Sprite teamLogo;&#10;    public Color teamColor;&#10;    public int teamQuality;&#10;&#10;    [Header(&quot;Team Members&quot;)]&#10;    public TeamMember[] teamMembers;&#10;&#10;    [Header(&quot;Current Season Stats&quot;)]&#10;    [Tooltip(&quot;Wins, draws, losses, and points for the current season.&quot;)]&#10;    public SeasonStats currentSeasonStats;&#10;&#10;    [Header(&quot;All-Time Stats&quot;)]&#10;    [Tooltip(&quot;Cumulative wins, draws, losses, and points across all seasons.&quot;)]&#10;    public SeasonStats lifetimeStats;&#10;&#10;    /// &lt;summary&gt;&#10;    /// Records a match result, updating both season and lifetime stats.&#10;    /// &lt;/summary&gt;&#10;    public void RecordMatchResult(bool isWin, bool isDraw)&#10;    {&#10;        if (isWin)&#10;        {&#10;            currentSeasonStats.wins++;&#10;            lifetimeStats.wins++;&#10;        }&#10;        else if (isDraw)&#10;        {&#10;            currentSeasonStats.draws++;&#10;            lifetimeStats.draws++;&#10;        }&#10;        else&#10;        {&#10;            currentSeasonStats.losses++;&#10;            lifetimeStats.losses++;&#10;        }&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// Resets only the current season stats (e.g. at season start).&#10;    /// &lt;/summary&gt;&#10;    ///&#10;&#10;    public void ResetCurrentSeasonStats()&#10;    {&#10;        currentSeasonStats = new SeasonStats();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using System.Collections.Generic;&#10;using System.Linq;&#10;using UnityEngine;&#10;&#10;namespace League&#10;{&#10;    [Serializable]&#10;    public class SeasonStats&#10;    {&#10;        [Tooltip(&quot;List of finishing positions for the season.&quot;)]&#10;        public List&lt;int&gt; finishes;&#10;&#10;        // Points distribution similar to F1: 1st to 10th&#10;        private static readonly int[] PointsDistribution = {25, 18, 15, 12, 10, 8, 6, 4, 2, 1};&#10;&#10;        public SeasonStats()&#10;        {&#10;            finishes = new List&lt;int&gt;();&#10;        }&#10;&#10;        public int Points&#10;        {&#10;            get&#10;            {&#10;                int total = 0;&#10;                foreach (var pos in finishes)&#10;                {&#10;                    if (pos &gt;= 1 &amp;&amp; pos &lt;= PointsDistribution.Length)&#10;                        total += PointsDistribution[pos - 1];&#10;                }&#10;                return total;&#10;            }&#10;        }&#10;&#10;        public int Wins =&gt; finishes.Count(f =&gt; f == 1);&#10;    }&#10;&#10;    [CreateAssetMenu(fileName = &quot;NewTeam&quot;, menuName = &quot;League/Team&quot;)]&#10;    public class Team : ScriptableObject&#10;    {&#10;        [Header(&quot;Team Details&quot;)]&#10;        public string teamName;&#10;        public string teamDescription;&#10;        public Sprite teamLogo;&#10;        public Color teamColor;&#10;        public int teamQuality;&#10;&#10;        [Header(&quot;Team Members&quot;)]&#10;        public TeamMember[] teamMembers;&#10;&#10;        [Header(&quot;Current Season Stats&quot;)]&#10;        [Tooltip(&quot;Wins, draws, losses, and points for the current season.&quot;)]&#10;        public SeasonStats currentSeasonStats;&#10;&#10;        [Header(&quot;All-Time Stats&quot;)]&#10;        [Tooltip(&quot;Cumulative wins, draws, losses, and points across all seasons.&quot;)]&#10;        public SeasonStats lifetimeStats;&#10;&#10;        /// &lt;summary&gt;&#10;        /// Records a race finish position, updating both season and lifetime stats.&#10;        /// &lt;/summary&gt;&#10;        public void RecordRaceFinish(int position)&#10;        {&#10;            currentSeasonStats.finishes.Add(position);&#10;            lifetimeStats.finishes.Add(position);&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Resets only the current season stats (e.g. at season start).&#10;        /// &lt;/summary&gt;&#10;        public void ResetCurrentSeasonStats()&#10;        {&#10;            currentSeasonStats = new SeasonStats();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>