<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Calendar/CalendarEvents.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Calendar/CalendarEvents.cs" />
              <option name="originalContent" value="using System.Collections.Generic;&#10;using UnityEngine;&#10;&#10;namespace Calendar&#10;{&#10;    [CreateAssetMenu(fileName = &quot;CalendarEvents&quot;, menuName = &quot;Scriptable Objects/CalendarEvents&quot;)]&#10;    public class CalendarEvents : ScriptableObject&#10;    {&#10;        public List&lt;DayEventType&gt; calendarDayEvents = new List&lt;DayEventType&gt;();&#10;        &#10;        [Header(&quot;Common Holidays&quot;)]&#10;        public List&lt;DayEventType&gt; commonHolidays = new List&lt;DayEventType&gt;();&#10;&#10;        /// &lt;summary&gt;&#10;        /// Add a custom event to the calendar&#10;        /// &lt;/summary&gt;&#10;        public void AddEvent(DayEventType eventType)&#10;        {&#10;            if (!calendarDayEvents.Contains(eventType))&#10;            {&#10;                calendarDayEvents.Add(eventType);&#10;            }&#10;        }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// Remove an event from the calendar&#10;        /// &lt;/summary&gt;&#10;        public void RemoveEvent(DayEventType eventType)&#10;        {&#10;            calendarDayEvents.Remove(eventType);&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Get all events (custom and common holidays) occurring on the specified date&#10;        /// &lt;/summary&gt;&#10;        public List&lt;DayEventType&gt; GetEventsOnDate(System.DateTime date)&#10;        {&#10;            List&lt;DayEventType&gt; events = new List&lt;DayEventType&gt;();&#10;            foreach (var evt in calendarDayEvents)&#10;            {&#10;                if (evt.OccursOnDate(date))&#10;                    events.Add(evt);&#10;            }&#10;            foreach (var hol in commonHolidays)&#10;            {&#10;                if (hol.OccursOnDate(date))&#10;                    events.Add(hol);&#10;            }&#10;            return events;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections.Generic;&#10;using UnityEngine;&#10;&#10;namespace Calendar&#10;{&#10;    [CreateAssetMenu(fileName = &quot;CalendarEvents&quot;, menuName = &quot;Scriptable Objects/CalendarEvents&quot;)]&#10;    public class CalendarEvents : ScriptableObject&#10;    {&#10;        public List&lt;DayEventType&gt; calendarDayEvents = new List&lt;DayEventType&gt;();&#10;        &#10;        [Header(&quot;Common Holidays&quot;)]&#10;        public List&lt;DayEventType&gt; commonHolidays = new List&lt;DayEventType&gt;();&#10;&#10;        /// &lt;summary&gt;&#10;        /// Add a custom event to the calendar&#10;        /// &lt;/summary&gt;&#10;        public void AddEvent(DayEventType eventType)&#10;        {&#10;            if (!calendarDayEvents.Contains(eventType))&#10;            {&#10;                calendarDayEvents.Add(eventType);&#10;            }&#10;        }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// Remove an event from the calendar&#10;        /// &lt;/summary&gt;&#10;        public void RemoveEvent(DayEventType eventType)&#10;        {&#10;            calendarDayEvents.Remove(eventType);&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Get all events (custom and common holidays) occurring on the specified date&#10;        /// &lt;/summary&gt;&#10;        public List&lt;DayEventType&gt; GetEventsOnDate(System.DateTime date)&#10;        {&#10;            List&lt;DayEventType&gt; events = new List&lt;DayEventType&gt;();&#10;            foreach (var evt in calendarDayEvents)&#10;            {&#10;                if (evt.OccursOnDate(date))&#10;                    events.Add(evt);&#10;            }&#10;            foreach (var hol in commonHolidays)&#10;            {&#10;                if (hol.OccursOnDate(date))&#10;                    events.Add(hol);&#10;            }&#10;            return events;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/RaceManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/RaceManager.cs" />
              <option name="originalContent" value="using System;&#10;using System.Collections;&#10;using System.Collections.Generic;&#10;using System.ComponentModel.Design.Serialization;&#10;using System.Threading;&#10;using Calendar;&#10;using UnityEngine;&#10;using UnityEngine.Events;&#10;using UnityEngine.Rendering.Universal;&#10;using EventType = UnityEngine.EventType;&#10;using Random = UnityEngine.Random;&#10;&#10;public class RaceManager : MonoBehaviour&#10;{&#10;    public static RaceManager Instance { get; private set; }&#10;    public Camera mainCamera;&#10;    public bool isRaceStarted = false;&#10;    [Header(&quot;Spawn &amp; Difficulty&quot;)]&#10;    [Range(0.5f, 100f)]&#10;    public float difficulty = 1f; &#10;    // 0.5 = easy crews, 1 = normal, 2 = monster crews&#10;    public List&lt;Transform&gt; raceStartPositions;&#10;    public UnityEvent startRace;&#10;    public UnityEvent RaceDay;&#10;    &#10;    &#10;    public GameObject shipPrefab;&#10;    &#10;    &#10;    public List&lt;GameObject&gt; ships = new List&lt;GameObject&gt;();&#10;&#10;    public List&lt;ShipMovement&gt; RaceMovementPositions;&#10;    &#10;    public ShipMovement playerShip;&#10;    &#10;    [SerializeField]&#10;    private FinishMenu finishMenu;&#10;    &#10;    &#10;    [SerializeField]&#10;    public bool waitingForAd = false; // Flag to check if we are waiting for an ad to show&#10;&#10;    FMOD.Studio.EventInstance GarageAmbience;&#10;    FMOD.Studio.EventInstance RaceAmbience;&#10;    public FMOD.Studio.EventInstance CheeringAndClapping;&#10;&#10;    private void Awake()&#10;    {&#10;        if (Instance == null)&#10;        {&#10;            Instance = this;&#10;        }&#10;        else&#10;        {&#10;            Destroy(gameObject);&#10;        }&#10;&#10;        GarageAmbience = FMODUnity.RuntimeManager.CreateInstance(&quot;event:/Garage/Garage Ambience&quot;);&#10;        GarageAmbience.start();&#10;    }&#10;&#10;&#10;    public void OnEnable()&#10;    {&#10;        TimeManager.Instance.todaysEvents.AddListener(CheckForRaceDay);&#10;    }&#10;&#10;    &#10;    // Listener receives today's events list&#10;    public void CheckForRaceDay(List&lt;DayEventType&gt; todaysEvents)&#10;    {&#10;&#10;        if (todaysEvents != null &amp;&amp; todaysEvents.Count &gt; 0)&#10;        {&#10;            todaysEvents.ForEach(eventType =&gt;&#10;            {&#10;                if (eventType.OccasionType == Calendar.OccasionType.Race)&#10;                {&#10;                    _startRaceButton.text = &quot;Start Race&quot;;&#10;                }&#10;                else&#10;                {&#10;                    _startRaceButton.text = &quot;Practice Race&quot;;&#10;                }&#10;                &#10;            });&#10;        }&#10;    }&#10;&#10;    public void SpawnShips()&#10;    {&#10;        if (!GameManager.Instance.GetGameStarted()) return;&#10;        &#10;        &#10;        foreach (Transform racepos in raceStartPositions)&#10;        {&#10;            Debug.Log(&quot;Spawning ship at position: &quot; + racepos.position);&#10;            GameObject ship = Instantiate(shipPrefab, racepos.position, shipPrefab.transform.rotation);&#10;            var movement = ship.GetComponent&lt;ShipMovement&gt;();&#10;            movement.shipName = &quot;Ship &quot; + (ships.Count + 1);&#10;            &#10;            // 1) Generate AI stats&#10;            var aiStats = new CharacterStats(&#10;                strength : Random.Range(8f, 12f)  * difficulty,&#10;                stamina  : Random.Range(8f, 12f)  * difficulty,&#10;                technique: Random.Range(5f, 10f)  * difficulty,&#10;                teamWork : Random.Range(5f, 10f)  * difficulty&#10;            );&#10;            movement.stats = aiStats;&#10;            &#10;            ships.Add(ship);&#10;            &#10;        }&#10;        &#10;        // 2) Mark one as “player”&#10;        var playerGO = ships[ships.Count - 1];&#10;        var playerMove = playerGO.GetComponent&lt;ShipMovement&gt;();&#10;        playerMove.stats      = PlayerManager.Instance.GetPlayerStats();&#10;        playerMove.isPlayerShip = true; // Set this ship as the player's ship&#10;        playerMove.shipName   = &quot;Player Ship&quot;;&#10;        playerGO.name         = &quot;PlayerShip&quot;;&#10;        playerShip = playerMove; // Store reference to player ship&#10;        StartCoroutine(StartShips());&#10;    }&#10;&#10;    IEnumerator StartShips()&#10;    {&#10;        yield return new WaitForSeconds(1f);&#10;        startRace.Invoke();&#10;&#10;        RaceAmbience = FMODUnity.RuntimeManager.CreateInstance(&quot;event:/Race/Race Ambience&quot;);&#10;        RaceAmbience.start();&#10;&#10;        foreach (var go in ships)&#10;            go.GetComponent&lt;ShipMovement&gt;().SetRaceStarted(true);&#10;&#10;        GarageAmbience.setParameterByName(&quot;Mute Garage Ambience&quot;, 0f);&#10;    }&#10;&#10;    public void ShipFinished(ShipMovement ship)&#10;    {&#10;        RaceMovementPositions.Add(ship);&#10;        &#10;        bool raceisFinished = RaceFinished();&#10;&#10;        if (ship.isPlayerShip)&#10;        {&#10;            foreach(GameObject shipGO in ships)&#10;            {&#10;                ShipMovement shipMovement = shipGO.GetComponent&lt;ShipMovement&gt;();&#10;                if(shipMovement!=null)&#10;                {&#10;                   shipMovement.SetAiStatsAfterPlayerFinished(10f); // Speed up AI ships after player finishes&#10;                }&#10;            }&#10;        }&#10;        &#10;        if (raceisFinished)&#10;        {&#10;            foreach (ShipMovement shipMovement in RaceMovementPositions)&#10;            {&#10;                Debug.Log(&quot;Ship finished: &quot; + shipMovement.shipName + &quot; at position: &quot; + (RaceMovementPositions.IndexOf(shipMovement) + 1));&#10;            }&#10;            &#10;            if(GameManager.Instance.CanShowAd())&#10;            {&#10;                StartCoroutine(ShowAd());&#10;                GameManager.Instance.HideBannerAd();&#10;            }&#10;            &#10;            &#10;        }&#10;        &#10;     &#10;    }&#10;    &#10;    public void IsRaceFinished()&#10;    {&#10;        if (RaceFinished())&#10;        {&#10;            if(finishMenu == null)&#10;            {&#10;                finishMenu = FindObjectOfType&lt;FinishLine&gt;().finishMenu;&#10;            }&#10;            &#10;            &#10;            finishMenu.gameObject.SetActive(true);&#10;            &#10;            string firstPlaceShip = RaceMovementPositions[0].shipName;&#10;            string secondPlaceShip = RaceMovementPositions[1].shipName;&#10;            string thirdPlaceShip = RaceMovementPositions[2].shipName;&#10;            string forthPlaceShip = RaceMovementPositions.Count &gt; 3 ? RaceMovementPositions[3].shipName : &quot;N/A&quot;;&#10;            finishMenu.UpdatePositions( firstPlaceShip, secondPlaceShip, thirdPlaceShip, forthPlaceShip);&#10;            &#10;            Transform cameraStartPosition = GameManager.Instance.GetCameraStartPosition();&#10;            &#10;            mainCamera.transform.position = cameraStartPosition.position;&#10;            mainCamera.transform.rotation = cameraStartPosition.rotation;&#10;&#10;            if (RaceMovementPositions[0].isPlayerShip)&#10;            {&#10;                Debug.Log(&quot;Player finished first!&quot;);&#10;                finishMenu.UpdatePlayerMessage(true, &quot;You are the champion!&quot;);&#10;                PlayerManager.Instance.ModifyPlayerCoins(125f); // Reward player with coins&#10;                difficulty += .3f;&#10;&#10;                CheeringAndClapping = FMODUnity.RuntimeManager.CreateInstance(&quot;event:/Race/Cheering and Clapping&quot;);&#10;                CheeringAndClapping.start();&#10;&#10;            }&#10;            else&#10;            {&#10;                Debug.Log(&quot;Player did not finish first.&quot;);&#10;                finishMenu.UpdatePlayerMessage(false, &quot;Better luck next time!&quot;);&#10;                if( PlayerManager.Instance.GetPlayerCoins () &lt; 50f)&#10;                {&#10;                    PlayerManager.Instance.ModifyPlayerCoins(0f);&#10;                }&#10;                PlayerManager.Instance.ModifyPlayerCoins(-50f); // Deduct coins for not winning&#10;            }&#10;          &#10;            &#10;            &#10;            &#10;            &#10;            &#10;            &#10;        }&#10;    }&#10;&#10;    public void EndRace()&#10;    {&#10;        RaceMovementPositions.Clear();&#10;        foreach (GameObject ship in ships)&#10;        {&#10;            Destroy(ship);&#10;        }&#10;        ships.Clear();&#10;        isRaceStarted = false;&#10;        &#10;        mainCamera.transform.position = GameManager.Instance.cameraStartPosition.position;&#10;        mainCamera.transform.rotation = GameManager.Instance.cameraStartPosition.rotation;&#10;&#10;        GarageAmbience.setParameterByName(&quot;Mute Garage Ambience&quot;, 0f);&#10;        RaceAmbience.setParameterByName(&quot;Mute Race Ambience&quot;, 0f);&#10;    }&#10;    &#10;    IEnumerator ShowAd()&#10;    {&#10;        waitingForAd = true;&#10;        yield return new WaitForSeconds(5f);&#10;        AdsManager.Instance.interstitialAds.ShowInterstitialAd();&#10;    }&#10;    &#10;    public bool RaceFinished()&#10;    {&#10;        if(ships.Count != RaceMovementPositions.Count)&#10;        {&#10;            return false;&#10;        }&#10;      return true;&#10;    }&#10;    &#10;    &#10;    &#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using System.Collections;&#10;using System.Collections.Generic;&#10;using System.ComponentModel.Design.Serialization;&#10;using System.Threading;&#10;using Calendar;&#10;using UnityEngine;&#10;using UnityEngine.Events;&#10;using UnityEngine.Rendering.Universal;&#10;using EventType = UnityEngine.EventType;&#10;using Random = UnityEngine.Random;&#10;&#10;public class RaceManager : MonoBehaviour&#10;{&#10;    public static RaceManager Instance { get; private set; }&#10;    public Camera mainCamera;&#10;    public bool isRaceStarted = false;&#10;    [Header(&quot;Spawn &amp; Difficulty&quot;)]&#10;    [Range(0.5f, 100f)]&#10;    public float difficulty = 1f; &#10;    // 0.5 = easy crews, 1 = normal, 2 = monster crews&#10;    public List&lt;Transform&gt; raceStartPositions;&#10;    public UnityEvent startRace;&#10;    public UnityEvent RaceDay;&#10;&#10;&#10;    public GameObject shipPrefab;&#10;    &#10;    &#10;    public List&lt;GameObject&gt; ships = new List&lt;GameObject&gt;();&#10;&#10;    public List&lt;ShipMovement&gt; RaceMovementPositions;&#10;    &#10;    public ShipMovement playerShip;&#10;    &#10;    [SerializeField]&#10;    private FinishMenu finishMenu;&#10;    &#10;    &#10;    [SerializeField]&#10;    public bool waitingForAd = false; // Flag to check if we are waiting for an ad to show&#10;&#10;    FMOD.Studio.EventInstance GarageAmbience;&#10;    FMOD.Studio.EventInstance RaceAmbience;&#10;    public FMOD.Studio.EventInstance CheeringAndClapping;&#10;&#10;    private void Awake()&#10;    {&#10;        if (Instance == null)&#10;        {&#10;            Instance = this;&#10;        }&#10;        else&#10;        {&#10;            Destroy(gameObject);&#10;        }&#10;&#10;        GarageAmbience = FMODUnity.RuntimeManager.CreateInstance(&quot;event:/Garage/Garage Ambience&quot;);&#10;        GarageAmbience.start();&#10;    }&#10;&#10;&#10;    public void OnEnable()&#10;    {&#10;        TimeManager.Instance.todaysEvents.AddListener(CheckForRaceDay);&#10;    }&#10;&#10;    &#10;    // Listener receives today's events list&#10;    public void CheckForRaceDay(List&lt;DayEventType&gt; todaysEvents)&#10;    {&#10;&#10;        if (todaysEvents != null &amp;&amp; todaysEvents.Count &gt; 0)&#10;        {&#10;            todaysEvents.ForEach(eventType =&gt;&#10;            {&#10;                if (eventType.OccasionType == Calendar.OccasionType.Race)&#10;                {&#10;                    _startRaceButton.text = &quot;Start Race&quot;;&#10;                }&#10;                else&#10;                {&#10;                    _startRaceButton.text = &quot;Practice Race&quot;;&#10;                }&#10;                &#10;            });&#10;        }&#10;    }&#10;&#10;    public void SpawnShips()&#10;    {&#10;        if (!GameManager.Instance.GetGameStarted()) return;&#10;        &#10;        &#10;        foreach (Transform racepos in raceStartPositions)&#10;        {&#10;            Debug.Log(&quot;Spawning ship at position: &quot; + racepos.position);&#10;            GameObject ship = Instantiate(shipPrefab, racepos.position, shipPrefab.transform.rotation);&#10;            var movement = ship.GetComponent&lt;ShipMovement&gt;();&#10;            movement.shipName = &quot;Ship &quot; + (ships.Count + 1);&#10;            &#10;            // 1) Generate AI stats&#10;            var aiStats = new CharacterStats(&#10;                strength : Random.Range(8f, 12f)  * difficulty,&#10;                stamina  : Random.Range(8f, 12f)  * difficulty,&#10;                technique: Random.Range(5f, 10f)  * difficulty,&#10;                teamWork : Random.Range(5f, 10f)  * difficulty&#10;            );&#10;            movement.stats = aiStats;&#10;            &#10;            ships.Add(ship);&#10;            &#10;        }&#10;        &#10;        // 2) Mark one as “player”&#10;        var playerGO = ships[ships.Count - 1];&#10;        var playerMove = playerGO.GetComponent&lt;ShipMovement&gt;();&#10;        playerMove.stats      = PlayerManager.Instance.GetPlayerStats();&#10;        playerMove.isPlayerShip = true; // Set this ship as the player's ship&#10;        playerMove.shipName   = &quot;Player Ship&quot;;&#10;        playerGO.name         = &quot;PlayerShip&quot;;&#10;        playerShip = playerMove; // Store reference to player ship&#10;        StartCoroutine(StartShips());&#10;    }&#10;&#10;    IEnumerator StartShips()&#10;    {&#10;        yield return new WaitForSeconds(1f);&#10;        startRace.Invoke();&#10;&#10;        RaceAmbience = FMODUnity.RuntimeManager.CreateInstance(&quot;event:/Race/Race Ambience&quot;);&#10;        RaceAmbience.start();&#10;&#10;        foreach (var go in ships)&#10;            go.GetComponent&lt;ShipMovement&gt;().SetRaceStarted(true);&#10;&#10;        GarageAmbience.setParameterByName(&quot;Mute Garage Ambience&quot;, 0f);&#10;    }&#10;&#10;    public void ShipFinished(ShipMovement ship)&#10;    {&#10;        RaceMovementPositions.Add(ship);&#10;        &#10;        bool raceisFinished = RaceFinished();&#10;&#10;        if (ship.isPlayerShip)&#10;        {&#10;            foreach(GameObject shipGO in ships)&#10;            {&#10;                ShipMovement shipMovement = shipGO.GetComponent&lt;ShipMovement&gt;();&#10;                if(shipMovement!=null)&#10;                {&#10;                   shipMovement.SetAiStatsAfterPlayerFinished(10f); // Speed up AI ships after player finishes&#10;                }&#10;            }&#10;        }&#10;        &#10;        if (raceisFinished)&#10;        {&#10;            foreach (ShipMovement shipMovement in RaceMovementPositions)&#10;            {&#10;                Debug.Log(&quot;Ship finished: &quot; + shipMovement.shipName + &quot; at position: &quot; + (RaceMovementPositions.IndexOf(shipMovement) + 1));&#10;            }&#10;            &#10;            if(GameManager.Instance.CanShowAd())&#10;            {&#10;                StartCoroutine(ShowAd());&#10;                GameManager.Instance.HideBannerAd();&#10;            }&#10;            &#10;            &#10;        }&#10;        &#10;     &#10;    }&#10;    &#10;    public void IsRaceFinished()&#10;    {&#10;        if (RaceFinished())&#10;        {&#10;            if(finishMenu == null)&#10;            {&#10;                finishMenu = FindObjectOfType&lt;FinishLine&gt;().finishMenu;&#10;            }&#10;            &#10;            &#10;            finishMenu.gameObject.SetActive(true);&#10;            &#10;            string firstPlaceShip = RaceMovementPositions[0].shipName;&#10;            string secondPlaceShip = RaceMovementPositions[1].shipName;&#10;            string thirdPlaceShip = RaceMovementPositions[2].shipName;&#10;            string forthPlaceShip = RaceMovementPositions.Count &gt; 3 ? RaceMovementPositions[3].shipName : &quot;N/A&quot;;&#10;            finishMenu.UpdatePositions( firstPlaceShip, secondPlaceShip, thirdPlaceShip, forthPlaceShip);&#10;            &#10;            Transform cameraStartPosition = GameManager.Instance.GetCameraStartPosition();&#10;            &#10;            mainCamera.transform.position = cameraStartPosition.position;&#10;            mainCamera.transform.rotation = cameraStartPosition.rotation;&#10;&#10;            if (RaceMovementPositions[0].isPlayerShip)&#10;            {&#10;                Debug.Log(&quot;Player finished first!&quot;);&#10;                finishMenu.UpdatePlayerMessage(true, &quot;You are the champion!&quot;);&#10;                PlayerManager.Instance.ModifyPlayerCoins(125f); // Reward player with coins&#10;                difficulty += .3f;&#10;&#10;                CheeringAndClapping = FMODUnity.RuntimeManager.CreateInstance(&quot;event:/Race/Cheering and Clapping&quot;);&#10;                CheeringAndClapping.start();&#10;&#10;            }&#10;            else&#10;            {&#10;                Debug.Log(&quot;Player did not finish first.&quot;);&#10;                finishMenu.UpdatePlayerMessage(false, &quot;Better luck next time!&quot;);&#10;                if( PlayerManager.Instance.GetPlayerCoins () &lt; 50f)&#10;                {&#10;                    PlayerManager.Instance.ModifyPlayerCoins(0f);&#10;                }&#10;                PlayerManager.Instance.ModifyPlayerCoins(-50f); // Deduct coins for not winning&#10;            }&#10;          &#10;            &#10;            &#10;            &#10;            &#10;            &#10;            &#10;        }&#10;    }&#10;&#10;    public void EndRace()&#10;    {&#10;        RaceMovementPositions.Clear();&#10;        foreach (GameObject ship in ships)&#10;        {&#10;            Destroy(ship);&#10;        }&#10;        ships.Clear();&#10;        isRaceStarted = false;&#10;        &#10;        mainCamera.transform.position = GameManager.Instance.cameraStartPosition.position;&#10;        mainCamera.transform.rotation = GameManager.Instance.cameraStartPosition.rotation;&#10;&#10;        GarageAmbience.setParameterByName(&quot;Mute Garage Ambience&quot;, 0f);&#10;        RaceAmbience.setParameterByName(&quot;Mute Race Ambience&quot;, 0f);&#10;    }&#10;    &#10;    IEnumerator ShowAd()&#10;    {&#10;        waitingForAd = true;&#10;        yield return new WaitForSeconds(5f);&#10;        AdsManager.Instance.interstitialAds.ShowInterstitialAd();&#10;    }&#10;    &#10;    public bool RaceFinished()&#10;    {&#10;        if(ships.Count != RaceMovementPositions.Count)&#10;        {&#10;            return false;&#10;        }&#10;      return true;&#10;    }&#10;    &#10;    &#10;    &#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/StartMenu.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/StartMenu.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;using UnityEngine.SceneManagement;&#10;using UnityEngine.UIElements;&#10;&#10;public class StartMenu : MonoBehaviour&#10;{&#10;    [SerializeField] private UIDocument uiDoc;&#10;    private Button _startRaceButton,_trainButton,_workButton,_sleepButton;&#10;    [SerializeField] CameraController cameraController;&#10;    public bool isRaceDay = false;&#10;    &#10;    public GameObject trainingMenuPrefab;&#10;&#10;    FMOD.Studio.EventInstance GymBagZipUp;&#10;    &#10;    &#10;&#10;    void OnEnable()&#10;    {&#10;        uiDoc = GetComponent&lt;UIDocument&gt;();&#10;&#10;        var root = uiDoc.rootVisualElement;&#10;        _startRaceButton = root.Q&lt;Button&gt;(&quot;StartRaceButton&quot;);&#10;        _trainButton = root.Q&lt;Button&gt;(&quot;TrainingButton&quot;);&#10;        _workButton = root.Q&lt;Button&gt;(&quot;WorkButton&quot;);&#10;        _sleepButton = root.Q&lt;Button&gt;(&quot;SleepButton&quot;);&#10;        &#10;&#10;        _startRaceButton.clicked += OnStartRaceButtonClicked;&#10;        _trainButton.clicked += OnTrainingButtonClicked;&#10;        _workButton.clicked += OnWorkButtonClicked;&#10;        _sleepButton.clicked +=OnSleepButtonClicked;&#10;        &#10;        TimeManager.Instance.todaysEvents.AddListener(CheckForRaceDay());&#10;    }&#10;    &#10;    public void CheckForRaceDay()&#10;    {&#10;&#10;        if (TimeManager.Instance.todaysEvents &gt; 0)&#10;        {&#10;            &#10;        }&#10;        &#10;    &#10;    }&#10;    &#10;    &#10;    &#10;    &#10;    &#10;&#10;    public void OnStartRaceButtonClicked()&#10;    {&#10;        if (RaceManager.Instance.waitingForAd == true)&#10;        {&#10;            PlayerStatsView.Instance.DisplayInfo(&quot;Waiting for ad to show, please wait...&quot;, 3);&#10;            return;&#10;        }&#10;&#10;        if (!PlayerManager.Instance.playerHasEnoughEnergy(50))&#10;        {&#10;            PlayerStatsView.Instance.DisplayInfo(&quot;You Must have 50 Energy to Race&quot;, 3);&#10;            return;&#10;        }&#10;        &#10;            GameManager.Instance.StartGame();&#10;            RaceManager.Instance.SpawnShips();&#10;            uiDoc.gameObject.SetActive(false);&#10;            cameraController.MoveCameraToPosition(0);&#10;            PlayerManager.Instance.ModifyPlayerEnergy(-50);&#10;            TimeManager.Instance.UpdateTime();&#10;       &#10;&#10;    }&#10;&#10;    public void OnTrainingButtonClicked()&#10;    {&#10;       trainingMenuPrefab.SetActive(true);&#10;        &#10;        GymBagZipUp = FMODUnity.RuntimeManager.CreateInstance(&quot;event:/Training/Gym Bag Zip Up&quot;);&#10;        GymBagZipUp.start();&#10;        &#10;&#10;    }&#10;    &#10;    public void OnWorkButtonClicked()&#10;    {&#10;        if (PlayerManager.Instance.playerHasEnoughEnergy(25))&#10;        {&#10;            // Use MiniGameManager instead of loading separate scenes&#10;            if (MiniGames.MiniGameManager.Instance != null)&#10;            {&#10;                // Start a random work minigame through the manager&#10;                MiniGames.MiniGameManager.Instance.StartRandomWorkActivity();&#10;                &#10;                // Hide the start menu UI&#10;                uiDoc.gameObject.SetActive(false);&#10;                &#10;                // Deduct energy cost&#10;                PlayerManager.Instance.ModifyPlayerEnergy(-25);&#10;            }&#10;            else&#10;            {&#10;                // Fallback to old system if MiniGameManager not available&#10;                int randomValue = Random.Range(0, GameManager.Instance.miniGameWorkScenes.Count);&#10;                string selectedScene = GameManager.Instance.miniGameWorkScenes[randomValue];&#10;                SceneManager.LoadScene(selectedScene);&#10;            }&#10;        }&#10;        else&#10;        {&#10;            PlayerStatsView.Instance.DisplayInfo(&quot;You Must have 25 Energy to Work&quot;, 3);&#10;        }&#10;    }&#10;    public void OnSleepButtonClicked()&#10;    {&#10;        if (GameManager.Instance.CanShowSleepAd())&#10;        {&#10;            AdsManager.Instance.rewardedAds.ShowRewardedAd();&#10;        }&#10;        else&#10;        {&#10;            GameManager.Instance.Sleep(30);&#10;        }&#10;    }&#10;    &#10;    private void OnDisable()&#10;    {&#10;        _startRaceButton.clicked -= OnStartRaceButtonClicked;&#10;        _trainButton.clicked -= OnTrainingButtonClicked;&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections.Generic;&#10;using Calendar;&#10;using UnityEngine;&#10;using UnityEngine.SceneManagement;&#10;using UnityEngine.UIElements;&#10;&#10;public class StartMenu : MonoBehaviour&#10;{&#10;    [SerializeField] private UIDocument uiDoc;&#10;    private Button _startRaceButton,_trainButton,_workButton,_sleepButton;&#10;    [SerializeField] CameraController cameraController;&#10;    public bool isRaceDay = false;&#10;    &#10;    public GameObject trainingMenuPrefab;&#10;&#10;    FMOD.Studio.EventInstance GymBagZipUp;&#10;    &#10;    &#10;&#10;    void OnEnable()&#10;    {&#10;        uiDoc = GetComponent&lt;UIDocument&gt;();&#10;&#10;        var root = uiDoc.rootVisualElement;&#10;        _startRaceButton = root.Q&lt;Button&gt;(&quot;StartRaceButton&quot;);&#10;        _trainButton = root.Q&lt;Button&gt;(&quot;TrainingButton&quot;);&#10;        _workButton = root.Q&lt;Button&gt;(&quot;WorkButton&quot;);&#10;        _sleepButton = root.Q&lt;Button&gt;(&quot;SleepButton&quot;);&#10;        &#10;&#10;        _startRaceButton.clicked += OnStartRaceButtonClicked;&#10;        _trainButton.clicked += OnTrainingButtonClicked;&#10;        _workButton.clicked += OnWorkButtonClicked;&#10;        _sleepButton.clicked +=OnSleepButtonClicked;&#10;        &#10;        TimeManager.Instance.todaysEvents.AddListener(CheckForRaceDay);&#10;    }&#10;    &#10;    // Listener receives today's events list&#10;   public void CheckForRaceDay(List&lt;DayEventType&gt; todaysEvents)&#10;    {&#10;&#10;       if (todaysEvents != null &amp;&amp; todaysEvents.Count &gt; 0)&#10;        {&#10;            // TODO: handle events, e.g. enable race button on &quot;Race Day&quot;&#10;        }&#10;    }&#10;    &#10;    &#10;    &#10;    &#10;    &#10;&#10;    public void OnStartRaceButtonClicked()&#10;    {&#10;        if (RaceManager.Instance.waitingForAd == true)&#10;        {&#10;            PlayerStatsView.Instance.DisplayInfo(&quot;Waiting for ad to show, please wait...&quot;, 3);&#10;            return;&#10;        }&#10;&#10;        if (!PlayerManager.Instance.playerHasEnoughEnergy(50))&#10;        {&#10;            PlayerStatsView.Instance.DisplayInfo(&quot;You Must have 50 Energy to Race&quot;, 3);&#10;            return;&#10;        }&#10;        &#10;            GameManager.Instance.StartGame();&#10;            RaceManager.Instance.SpawnShips();&#10;            uiDoc.gameObject.SetActive(false);&#10;            cameraController.MoveCameraToPosition(0);&#10;            PlayerManager.Instance.ModifyPlayerEnergy(-50);&#10;            TimeManager.Instance.UpdateTime();&#10;       &#10;&#10;    }&#10;&#10;    public void OnTrainingButtonClicked()&#10;    {&#10;       trainingMenuPrefab.SetActive(true);&#10;        &#10;        GymBagZipUp = FMODUnity.RuntimeManager.CreateInstance(&quot;event:/Training/Gym Bag Zip Up&quot;);&#10;        GymBagZipUp.start();&#10;        &#10;&#10;    }&#10;    &#10;    public void OnWorkButtonClicked()&#10;    {&#10;        if (PlayerManager.Instance.playerHasEnoughEnergy(25))&#10;        {&#10;            // Use MiniGameManager instead of loading separate scenes&#10;            if (MiniGames.MiniGameManager.Instance != null)&#10;            {&#10;                // Start a random work minigame through the manager&#10;                MiniGames.MiniGameManager.Instance.StartRandomWorkActivity();&#10;                &#10;                // Hide the start menu UI&#10;                uiDoc.gameObject.SetActive(false);&#10;                &#10;                // Deduct energy cost&#10;                PlayerManager.Instance.ModifyPlayerEnergy(-25);&#10;            }&#10;            else&#10;            {&#10;                // Fallback to old system if MiniGameManager not available&#10;                int randomValue = Random.Range(0, GameManager.Instance.miniGameWorkScenes.Count);&#10;                string selectedScene = GameManager.Instance.miniGameWorkScenes[randomValue];&#10;                SceneManager.LoadScene(selectedScene);&#10;            }&#10;        }&#10;        else&#10;        {&#10;            PlayerStatsView.Instance.DisplayInfo(&quot;You Must have 25 Energy to Work&quot;, 3);&#10;        }&#10;    }&#10;    public void OnSleepButtonClicked()&#10;    {&#10;        if (GameManager.Instance.CanShowSleepAd())&#10;        {&#10;            AdsManager.Instance.rewardedAds.ShowRewardedAd();&#10;        }&#10;        else&#10;        {&#10;            GameManager.Instance.Sleep(30);&#10;        }&#10;    }&#10;    &#10;    private void OnDisable()&#10;    {&#10;        _startRaceButton.clicked -= OnStartRaceButtonClicked;&#10;        _trainButton.clicked -= OnTrainingButtonClicked;&#10;       TimeManager.Instance.todaysEvents.RemoveListener(CheckForRaceDay);&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/TimeManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/TimeManager.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;using UnityEngine.Events;&#10;using UnityEngine.Serialization;&#10;using System;&#10;using System.Collections.Generic;&#10;using Calendar;&#10;&#10;public class TimeManager : MonoBehaviour&#10;{&#10;    // Singleton instance&#10;    private static TimeManager _instance;&#10;    public static TimeManager Instance { get { return _instance; } }&#10;    internal string[] daysOfWeek = { &quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot; };&#10;    internal string[] monthNames = { &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot; };&#10;    internal int[] daysInMonth = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };&#10;    public CalendarEvents calendarEvents;&#10;    &#10;&#10;    [SerializeField] internal UnityEvent timeChangedEvent;&#10;&#10;    // Add this variable to the TimeManager class&#10;    public UnityEvent onNewDay;&#10;   public UnityEvent onNightStart;&#10;  &#10;&#10;    // Private constructor to enforce singleton pattern&#10;    private TimeManager() { }&#10;&#10;    // Time variables&#10;    [SerializeField, Range(0, 24)] private float timeOfDay;&#10;    [SerializeField, Range(0f, 1f)] private float timeMultiplier = 1f;&#10;    private int daysPassed = 0;&#10;    private bool newItemSpawned = false;&#10;&#10;    // Calendar variables&#10;    [SerializeField] private int currentDay = 1;&#10;    [SerializeField] private int currentMonth = 0; // 0-based index (0 = January)&#10;    [SerializeField] private int currentYear = 2008; // Starting year&#10;    [SerializeField] private int currentDayOfWeek = 2; // 0-based index (0 = Sunday)&#10;    [SerializeField] internal int daysInCurrentMonth = 31; // Default to 31 days for January&#10;    &#10;    [Serializable]&#10;    public class DateChangedEvent : UnityEvent&lt;int, int, int&gt; { } // day, month, year&#10;    &#10; &#10;    &#10;    public DateChangedEvent onDateChanged;&#10;    &#10;    public class TodaysEvents : UnityEvent&lt;List&lt;DayEventType&gt;&gt; { } // List of events for today&#10;    &#10;    public TodaysEvents todaysEvents;&#10;    &#10;    // Properties&#10;    public float TimeOfDay { get =&gt; timeOfDay; }&#10;    public float TimeMultiplier { get =&gt; timeMultiplier; set =&gt; timeMultiplier = Mathf.Max(value, 0f); }&#10;    public int DaysPassed { get =&gt; daysPassed; }&#10;    &#10;&#10;    // Initialize singleton instance&#10;    private void Awake()&#10;    {&#10;        // If an instance already exists, destroy this object&#10;        if (Instance == null)&#10;        {&#10;            _instance = this;&#10;            DontDestroyOnLoad(gameObject);&#10;        }&#10;        else&#10;        {&#10;            Destroy(gameObject);&#10;        }&#10;        &#10;        timeOfDay = 6f; // Start at 6 AM&#10;        daysPassed = 0;&#10;        &#10;        // Calculate the correct day of the week for the starting date (January 1st, 2008 = Tuesday)&#10;        int calculatedDayOfWeek = GetDayOfWeekIndex(currentDay, currentMonth, currentYear);&#10;     &#10;        currentDayOfWeek = calculatedDayOfWeek;&#10;        &#10;        daysInCurrentMonth = GetDaysInCurrentMonth();&#10;        HasEventToday();&#10;        &#10;    }&#10;    &#10;    // Update the time of day based on the time multiplier&#10;    public void SleepTime()&#10;    {&#10;        // Reset time of day to 0 (start of a new day)&#10;        timeOfDay = 6f;&#10;        daysPassed++;&#10;        newItemSpawned = false;&#10;        &#10;        // Advance the calendar by one day&#10;        AdvanceCalendar(1);&#10;        &#10;        onNewDay.Invoke(); // Raise the OnNewDay event&#10;        timeChangedEvent.Invoke();&#10;    }&#10;    &#10;    // Calendar-related methods&#10;    private void AdvanceCalendar(int daysToAdvance)&#10;    {&#10;        for (int i = 0; i &lt; daysToAdvance; i++)&#10;        {&#10;            // Advance day of week (cycle through 0-6)&#10;            currentDayOfWeek = (currentDayOfWeek + 1) % 7;&#10;            &#10;            // Advance day&#10;            currentDay++;&#10;            &#10;            // Check if we need to move to the next month&#10;            if (currentDay &gt; GetDaysInCurrentMonth())&#10;            {&#10;                currentDay = 1;&#10;                currentMonth++;&#10;                daysInCurrentMonth = GetDaysInCurrentMonth(); // Update days in current month&#10;                // Check if we need to move to the next year&#10;                if (currentMonth &gt;= 12)&#10;                {&#10;                    currentMonth = 0;&#10;                    currentYear++;&#10;                }&#10;            }&#10;        }&#10;&#10;        HasEventToday();&#10;        // Trigger the date changed event&#10;        if (onDateChanged != null)&#10;            onDateChanged.Invoke(currentDay, currentMonth, currentYear);&#10;    }&#10;    &#10;    private int GetDaysInCurrentMonth()&#10;    {&#10;        // Handle leap years for February&#10;        if (currentMonth == 1 &amp;&amp; IsLeapYear(currentYear))&#10;            return 29;&#10;            &#10;        return daysInMonth[currentMonth];&#10;    }&#10;    &#10;    public string GetDayOfWeek(int day, int month, int year)&#10;    {&#10;        // For Zeller's Congruence, January and February are counted as months 13 and 14 of the previous year&#10;        int adjustedMonth = month + 1; // Convert from 0-based to 1-based&#10;        int adjustedYear = year;&#10;        &#10;        if (adjustedMonth &lt; 3)&#10;        {&#10;            adjustedMonth += 12;&#10;            adjustedYear--;&#10;        }&#10;        &#10;        // Zeller's Congruence formula&#10;        int q = day;&#10;        int m = adjustedMonth;&#10;        int k = adjustedYear % 100;&#10;        int j = adjustedYear / 100;&#10;        &#10;        int h = (q + (13 * (m + 1)) / 5 + k + k / 4 + j / 4 - 2 * j) % 7;&#10;        &#10;        // Convert Zeller's result (Saturday=0) to our format (Sunday=0)&#10;        // Zeller: Sat=0, Sun=1, Mon=2, Tue=3, Wed=4, Thu=5, Fri=6&#10;        // Ours:   Sun=0, Mon=1, Tue=2, Wed=3, Thu=4, Fri=5, Sat=6&#10;        int dayOfWeekIndex = (h + 6) % 7;&#10;        &#10;        return daysOfWeek[dayOfWeekIndex];&#10;    }&#10;    &#10;    public int GetDayOfWeekIndex(int day, int month, int year)&#10;    {&#10;        // For Zeller's Congruence, January and February are counted as months 13 and 14 of the previous year&#10;        int adjustedMonth = month + 1; // Convert from 0-based to 1-based&#10;        int adjustedYear = year;&#10;        &#10;        if (adjustedMonth &lt; 3)&#10;        {&#10;            adjustedMonth += 12;&#10;            adjustedYear--;&#10;        }&#10;        &#10;        // Zeller's Congruence formula&#10;        int q = day;&#10;        int m = adjustedMonth;&#10;        int k = adjustedYear % 100;&#10;        int j = adjustedYear / 100;&#10;        &#10;        int h = (q + (13 * (m + 1)) / 5 + k + k / 4 + j / 4 - 2 * j) % 7;&#10;        &#10;        // Convert Zeller's result (Saturday=0) to our format (Sunday=0)&#10;        // Zeller: Sat=0, Sun=1, Mon=2, Tue=3, Wed=4, Thu=5, Fri=6&#10;        // Ours:   Sun=0, Mon=1, Tue=2, Wed=3, Thu=4, Fri=5, Sat=6&#10;        int dayOfWeek = (h + 6) % 7;&#10;        &#10;       &#10;        return dayOfWeek;&#10;    }&#10;    &#10;    internal int GetDaysInMonth(int month, int year)&#10;    {&#10;        // Handle leap years for February&#10;        if (month == 1 &amp;&amp; IsLeapYear(year))&#10;            return 29;&#10;        &#10;        return daysInMonth[month];&#10;    }&#10;    &#10;    private bool IsLeapYear(int year)&#10;    {&#10;        // Leap year calculation&#10;        return (year % 4 == 0 &amp;&amp; year % 100 != 0) || (year % 400 == 0);&#10;    }&#10;    &#10;    // Utility methods for date formatting&#10;    public string GetCurrentDateFormatted()&#10;    {&#10;        return string.Format(&quot;{0} {1}, {2}&quot;, monthNames[currentMonth], currentDay, currentYear);&#10;    }&#10;    &#10;    public string GetCurrentDayOfWeekString()&#10;    {&#10;        return GetDayOfWeek(currentDay, currentMonth, currentYear);&#10;    }&#10;    &#10;    public string GetFullDateFormatted()&#10;    {&#10;        return string.Format(&quot;{0}, {1} {2}, {3}&quot;, &#10;            daysOfWeek[currentDayOfWeek], &#10;            monthNames[currentMonth], &#10;            currentDay, &#10;            currentYear);&#10;    }&#10;    &#10;    // Getters for calendar variables&#10;    public int GetCurrentDay() { return currentDay; }&#10;    public int GetCurrentMonth() { return currentMonth; }&#10;    public int GetCurrentYear() { return currentYear; }&#10;    &#10; &#10;    public int GetCurrentDayOfWeek() { return currentDayOfWeek; }&#10;&#10;    /// &lt;summary&gt;&#10;    /// Gets the current date as a System.DateTime&#10;    /// &lt;/summary&gt;&#10;    public DateTime GetCurrentDate()&#10;    {&#10;        // currentMonth is 0-based (0 = January), DateTime expects 1-12&#10;        return new DateTime(currentYear, currentMonth + 1, currentDay);&#10;    }&#10;    &#10;    public void UpdateTime()&#10;    {&#10;        float previousTimeOfDay = timeOfDay;&#10;        /*timeOfDay += Time.deltaTime * timeMultiplier;*/&#10;        timeOfDay += 3f;&#10;        timeOfDay %= 24f; // Clamp to 0-24&#10;&#10;        // Check if a new day has started&#10;        if (previousTimeOfDay &gt; timeOfDay)&#10;        {&#10;            daysPassed++;&#10;            newItemSpawned = false;&#10;        }&#10;&#10;        // Call SpawnItems method at the beginning of a new day&#10;        if (!newItemSpawned &amp;&amp; timeOfDay &gt;= 0 &amp;&amp; timeOfDay &lt;= 1)&#10;        {&#10;            Debug.Log(&quot;New day has started&quot;);&#10;            onNewDay.Invoke(); // Raise the OnNewDay event&#10;            newItemSpawned = true;&#10;        }&#10;&#10;        if (IsNight())&#10;        {&#10;            onNightStart.Invoke(); // Raise the OnNightStart event&#10;        }&#10;        &#10;        timeChangedEvent.Invoke();&#10;    }&#10;&#10;    public bool IsNight()&#10;    {&#10;        return timeOfDay &gt;= 19 &amp;&amp; timeOfDay &lt;= 24;&#10;    }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Returns all calendar events occurring on the current date&#10;    /// &lt;/summary&gt;&#10;    public List&lt;DayEventType&gt; GetEventsToday()&#10;    {&#10;        TodaysEvents.Invoke(calendarEvents.GetEventsOnDate(GetCurrentDate()));&#10;        return calendarEvents.GetEventsOnDate(GetCurrentDate());&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// Returns true if there is at least one event today&#10;    /// &lt;/summary&gt;&#10;    public bool HasEventToday()&#10;    {&#10;        Debug.Log(&quot;Checking for events today&quot;+ &quot; &quot; + GetCurrentDate() + &quot; &quot; + GetEventsToday().Count);&#10;        return GetEventsToday().Count &gt; 0;&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;using UnityEngine.Events;&#10;using UnityEngine.Serialization;&#10;using System;&#10;using System.Collections.Generic;&#10;using Calendar;&#10;&#10;public class TimeManager : MonoBehaviour&#10;{&#10;    // Singleton instance&#10;    private static TimeManager _instance;&#10;    public static TimeManager Instance { get { return _instance; } }&#10;    internal string[] daysOfWeek = { &quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot; };&#10;    internal string[] monthNames = { &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot; };&#10;    internal int[] daysInMonth = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };&#10;    public CalendarEvents calendarEvents;&#10;    &#10;&#10;    [SerializeField] internal UnityEvent timeChangedEvent;&#10;&#10;    // Add this variable to the TimeManager class&#10;    public UnityEvent onNewDay;&#10;   public UnityEvent onNightStart;&#10;  &#10;&#10;    // Private constructor to enforce singleton pattern&#10;    private TimeManager() { }&#10;&#10;    // Time variables&#10;    [SerializeField, Range(0, 24)] private float timeOfDay;&#10;    [SerializeField, Range(0f, 1f)] private float timeMultiplier = 1f;&#10;    private int daysPassed = 0;&#10;    private bool newItemSpawned = false;&#10;&#10;    // Calendar variables&#10;    [SerializeField] private int currentDay = 1;&#10;    [SerializeField] private int currentMonth = 0; // 0-based index (0 = January)&#10;    [SerializeField] private int currentYear = 2008; // Starting year&#10;    [SerializeField] private int currentDayOfWeek = 2; // 0-based index (0 = Sunday)&#10;    [SerializeField] internal int daysInCurrentMonth = 31; // Default to 31 days for January&#10;    &#10;    [Serializable]&#10;    public class DateChangedEvent : UnityEvent&lt;int, int, int&gt; { } // day, month, year&#10;    &#10; &#10;    &#10;    public DateChangedEvent onDateChanged;&#10;    &#10;    public class TodaysEvents : UnityEvent&lt;List&lt;DayEventType&gt;&gt; { } // List of events for today&#10;    [SerializeField] public TodaysEvents todaysEvents = new TodaysEvents();&#10;    &#10;    // Properties&#10;    public float TimeOfDay { get =&gt; timeOfDay; }&#10;    public float TimeMultiplier { get =&gt; timeMultiplier; set =&gt; timeMultiplier = Mathf.Max(value, 0f); }&#10;    public int DaysPassed { get =&gt; daysPassed; }&#10;    &#10;&#10;    // Initialize singleton instance&#10;    private void Awake()&#10;    {&#10;        // If an instance already exists, destroy this object&#10;        if (Instance == null)&#10;        {&#10;            _instance = this;&#10;            DontDestroyOnLoad(gameObject);&#10;        }&#10;        else&#10;        {&#10;            Destroy(gameObject);&#10;        }&#10;        &#10;        timeOfDay = 6f; // Start at 6 AM&#10;        daysPassed = 0;&#10;        &#10;        // Calculate the correct day of the week for the starting date (January 1st, 2008 = Tuesday)&#10;        int calculatedDayOfWeek = GetDayOfWeekIndex(currentDay, currentMonth, currentYear);&#10;     &#10;        currentDayOfWeek = calculatedDayOfWeek;&#10;        &#10;        daysInCurrentMonth = GetDaysInCurrentMonth();&#10;        HasEventToday();&#10;        &#10;    }&#10;    &#10;    // Update the time of day based on the time multiplier&#10;    public void SleepTime()&#10;    {&#10;        // Reset time of day to 0 (start of a new day)&#10;        timeOfDay = 6f;&#10;        daysPassed++;&#10;        newItemSpawned = false;&#10;        &#10;        // Advance the calendar by one day&#10;        AdvanceCalendar(1);&#10;        &#10;        onNewDay.Invoke(); // Raise the OnNewDay event&#10;        timeChangedEvent.Invoke();&#10;    }&#10;    &#10;    // Calendar-related methods&#10;    private void AdvanceCalendar(int daysToAdvance)&#10;    {&#10;        for (int i = 0; i &lt; daysToAdvance; i++)&#10;        {&#10;            // Advance day of week (cycle through 0-6)&#10;            currentDayOfWeek = (currentDayOfWeek + 1) % 7;&#10;            &#10;            // Advance day&#10;            currentDay++;&#10;            &#10;            // Check if we need to move to the next month&#10;            if (currentDay &gt; GetDaysInCurrentMonth())&#10;            {&#10;                currentDay = 1;&#10;                currentMonth++;&#10;                daysInCurrentMonth = GetDaysInCurrentMonth(); // Update days in current month&#10;                // Check if we need to move to the next year&#10;                if (currentMonth &gt;= 12)&#10;                {&#10;                    currentMonth = 0;&#10;                    currentYear++;&#10;                }&#10;            }&#10;        }&#10;&#10;        HasEventToday();&#10;        // Trigger the date changed event&#10;        if (onDateChanged != null)&#10;            onDateChanged.Invoke(currentDay, currentMonth, currentYear);&#10;    }&#10;    &#10;    private int GetDaysInCurrentMonth()&#10;    {&#10;        // Handle leap years for February&#10;        if (currentMonth == 1 &amp;&amp; IsLeapYear(currentYear))&#10;            return 29;&#10;            &#10;        return daysInMonth[currentMonth];&#10;    }&#10;    &#10;    public string GetDayOfWeek(int day, int month, int year)&#10;    {&#10;        // For Zeller's Congruence, January and February are counted as months 13 and 14 of the previous year&#10;        int adjustedMonth = month + 1; // Convert from 0-based to 1-based&#10;        int adjustedYear = year;&#10;        &#10;        if (adjustedMonth &lt; 3)&#10;        {&#10;            adjustedMonth += 12;&#10;            adjustedYear--;&#10;        }&#10;        &#10;        // Zeller's Congruence formula&#10;        int q = day;&#10;        int m = adjustedMonth;&#10;        int k = adjustedYear % 100;&#10;        int j = adjustedYear / 100;&#10;        &#10;        int h = (q + (13 * (m + 1)) / 5 + k + k / 4 + j / 4 - 2 * j) % 7;&#10;        &#10;        // Convert Zeller's result (Saturday=0) to our format (Sunday=0)&#10;        // Zeller: Sat=0, Sun=1, Mon=2, Tue=3, Wed=4, Thu=5, Fri=6&#10;        // Ours:   Sun=0, Mon=1, Tue=2, Wed=3, Thu=4, Fri=5, Sat=6&#10;        int dayOfWeekIndex = (h + 6) % 7;&#10;        &#10;        return daysOfWeek[dayOfWeekIndex];&#10;    }&#10;    &#10;    public int GetDayOfWeekIndex(int day, int month, int year)&#10;    {&#10;        // For Zeller's Congruence, January and February are counted as months 13 and 14 of the previous year&#10;        int adjustedMonth = month + 1; // Convert from 0-based to 1-based&#10;        int adjustedYear = year;&#10;        &#10;        if (adjustedMonth &lt; 3)&#10;        {&#10;            adjustedMonth += 12;&#10;            adjustedYear--;&#10;        }&#10;        &#10;        // Zeller's Congruence formula&#10;        int q = day;&#10;        int m = adjustedMonth;&#10;        int k = adjustedYear % 100;&#10;        int j = adjustedYear / 100;&#10;        &#10;        int h = (q + (13 * (m + 1)) / 5 + k + k / 4 + j / 4 - 2 * j) % 7;&#10;        &#10;        // Convert Zeller's result (Saturday=0) to our format (Sunday=0)&#10;        // Zeller: Sat=0, Sun=1, Mon=2, Tue=3, Wed=4, Thu=5, Fri=6&#10;        // Ours:   Sun=0, Mon=1, Tue=2, Wed=3, Thu=4, Fri=5, Sat=6&#10;        int dayOfWeek = (h + 6) % 7;&#10;        &#10;       &#10;        return dayOfWeek;&#10;    }&#10;    &#10;    internal int GetDaysInMonth(int month, int year)&#10;    {&#10;        // Handle leap years for February&#10;        if (month == 1 &amp;&amp; IsLeapYear(year))&#10;            return 29;&#10;        &#10;        return daysInMonth[month];&#10;    }&#10;    &#10;    private bool IsLeapYear(int year)&#10;    {&#10;        // Leap year calculation&#10;        return (year % 4 == 0 &amp;&amp; year % 100 != 0) || (year % 400 == 0);&#10;    }&#10;    &#10;    // Utility methods for date formatting&#10;    public string GetCurrentDateFormatted()&#10;    {&#10;        return string.Format(&quot;{0} {1}, {2}&quot;, monthNames[currentMonth], currentDay, currentYear);&#10;    }&#10;    &#10;    public string GetCurrentDayOfWeekString()&#10;    {&#10;        return GetDayOfWeek(currentDay, currentMonth, currentYear);&#10;    }&#10;    &#10;    public string GetFullDateFormatted()&#10;    {&#10;        return string.Format(&quot;{0}, {1} {2}, {3}&quot;, &#10;            daysOfWeek[currentDayOfWeek], &#10;            monthNames[currentMonth], &#10;            currentDay, &#10;            currentYear);&#10;    }&#10;    &#10;    // Getters for calendar variables&#10;    public int GetCurrentDay() { return currentDay; }&#10;    public int GetCurrentMonth() { return currentMonth; }&#10;    public int GetCurrentYear() { return currentYear; }&#10;    &#10; &#10;    public int GetCurrentDayOfWeek() { return currentDayOfWeek; }&#10;&#10;    /// &lt;summary&gt;&#10;    /// Gets the current date as a System.DateTime&#10;    /// &lt;/summary&gt;&#10;    public DateTime GetCurrentDate()&#10;    {&#10;        // currentMonth is 0-based (0 = January), DateTime expects 1-12&#10;        return new DateTime(currentYear, currentMonth + 1, currentDay);&#10;    }&#10;    &#10;    public void UpdateTime()&#10;    {&#10;        float previousTimeOfDay = timeOfDay;&#10;        /*timeOfDay += Time.deltaTime * timeMultiplier;*/&#10;        timeOfDay += 3f;&#10;        timeOfDay %= 24f; // Clamp to 0-24&#10;&#10;        // Check if a new day has started&#10;        if (previousTimeOfDay &gt; timeOfDay)&#10;        {&#10;            daysPassed++;&#10;            newItemSpawned = false;&#10;        }&#10;&#10;        // Call SpawnItems method at the beginning of a new day&#10;        if (!newItemSpawned &amp;&amp; timeOfDay &gt;= 0 &amp;&amp; timeOfDay &lt;= 1)&#10;        {&#10;            Debug.Log(&quot;New day has started&quot;);&#10;            onNewDay.Invoke(); // Raise the OnNewDay event&#10;            newItemSpawned = true;&#10;        }&#10;&#10;        if (IsNight())&#10;        {&#10;            onNightStart.Invoke(); // Raise the OnNightStart event&#10;        }&#10;        &#10;        timeChangedEvent.Invoke();&#10;    }&#10;&#10;    public bool IsNight()&#10;    {&#10;        return timeOfDay &gt;= 19 &amp;&amp; timeOfDay &lt;= 24;&#10;    }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// Returns all calendar events occurring on the current date&#10;    /// &lt;/summary&gt;&#10;    public List&lt;DayEventType&gt; GetEventsToday()&#10;    {&#10;       var events = calendarEvents.GetEventsOnDate(GetCurrentDate());&#10;       todaysEvents?.Invoke(events);&#10;       return events;&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// Returns true if there is at least one event today&#10;    /// &lt;/summary&gt;&#10;    public bool HasEventToday()&#10;    {&#10;        Debug.Log(&quot;Checking for events today&quot;+ &quot; &quot; + GetCurrentDate() + &quot; &quot; + GetEventsToday().Count);&#10;        return GetEventsToday().Count &gt; 0;&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>